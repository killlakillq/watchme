datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Language {
  id          String  @id @default(uuid())
  iso6391     String  @map("iso_639_1")
  englishName String  @map("english_name")
  name        String
  movie       Movie[]

  @@map("languages")
}

model Country {
  id       String  @id @default(uuid())
  iso31661 String  @map("iso_3166_1")
  name     String
  movie    Movie[]

  @@map("countries")
}

model Company {
  id            String  @id @default(uuid())
  logo          String?
  name          String
  originCountry String  @map("origin_country")
  movie         Movie[]

  @@map("companies")
}

model Genre {
  id    String  @id @default(uuid())
  name  String
  movie Movie[]

  @@map("genres")
}

model Collection {
  id       String  @id @default(uuid())
  name     String
  poster   String
  backdrop String
  movie    Movie[]

  @@map("collections")
}

model Movie {
  id                  String      @id @default(uuid())
  imdbId              String?     @map("imdb_id")
  adult               Boolean
  backdrop            String
  belongsToCollection Collection? @relation(fields: [collectionId], references: [id])
  collectionId        String?     @map("collection_id")
  budget              Int
  genres              Genre[]
  homepage            String?
  originalLanguage    String      @map("original_language")
  originalTitle       String      @map("original_title")
  overview            String
  popularity          Float
  poster              String?
  productionCompanies Company[]
  productionCountries Country[]
  releaseDate         DateTime    @map("release_date")
  revenue             Int
  runtime             Int
  spokenLanguages     Language[]
  status              String
  tagline             String?
  title               String
  video               Boolean
  voteAverage         Float       @map("vote_average")
  voteCount           Int         @map("vote_count")
  review              Review?     @relation(fields: [reviewId], references: [id])
  reviewId            String?     @unique @map("review_id")

  watchlists MoviesOnWatchlists[]

  @@map("movies")
}

model Review {
  id          String          @id @default(uuid())
  name        String
  description String
  rating      Int
  date        DateTime
  comment     ReviewComment[]
  movie       Movie[]
  user        User[]

  @@map("reviews")
}

model ReviewComment {
  id          String   @id @default(uuid())
  name        String
  description String
  date        DateTime
  review      Review?  @relation(fields: [reviewId], references: [id])
  reviewId    String?  @map("review_id")

  @@map("review_comments")
}

model User {
  id           String  @id @default(uuid())
  picture      String?
  username     String
  email        String  @unique
  password     String?
  resetToken   String? @map("reset_token")
  refreshToken String? @map("refresh_token")
  review       Review? @relation(fields: [reviewId], references: [id])
  reviewId     String? @map("review_id")

  watchlist   Watchlist? @relation(fields: [watchlistId], references: [id])
  watchlistId String?    @map("watchlist_id")

  @@map("users")
}

model Watchlist {
  id        String               @id @default(uuid())
  watchDate DateTime             @default(now()) @map("watch_date")
  movies    MoviesOnWatchlists[]
  users     User[]

  @@map("watchlists")
}

model Log {
  id        String @id @default(uuid())
  level     String
  timestamp String
  message   String
  method    String
  path      String
  userAgent String @map("user_agent")

  @@map("logs")
}

model MoviesOnWatchlists {
  movie       Movie     @relation(fields: [movieId], references: [id])
  movieId     String    @map("movie_id")
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id])
  watchlistId String    @map("watchlist_id")

  @@id([movieId, watchlistId])
}
